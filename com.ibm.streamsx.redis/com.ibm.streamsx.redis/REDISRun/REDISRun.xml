<?xml version="1.0" encoding="UTF-8"?><operatorModel xmlns="http://www.ibm.com/xmlns/prod/streams/spl/operator" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/operator operatorModel.xsd">
  <!--DO NOT EDIT THIS FILE - it is machine generated-->
  <javaOperatorModel>
    <!--Generated from com.ibm.streamsx.redis.REDISRun in impl/lib/com.ibm.streamsx.redis.jar at Wed Jan 22 13:53:17 CET 2020-->
    <context>
      <description>The **REDISRun** operator runs a user-defined SQL statement that is based on an input tuple.

 The statement is run once for each input tuple received.

 Result sets that are produced by the statement are emitted as output stream tuples.

 The **REDISRun** operator is commonly used to update, merge, and delete database management system (DBMS) records.

 This operator is also used to retrieve records, create and drop tables, and to call stored procedures.

 it is strongly recommended before you begin with the implementation of a SPL application on REDISRun operator, read the **documentation of database vendors**.

 Every database vendor delivers one or more JAR libraries as redis driver. Please check the version of your database server and the version of REDIS driver libraries.

 Behavior in a **consistent region**:

 The **REDISRun** operator can be used in a consistent region. It cannot be the start operator of a consistent region.

 In a consistent region, the configured value of the transactionSize is ignored. Instead, database commits are performed (when supported by the DBMS) on consistent region checkpoints, and database rollbacks are performed on consistent region resets.

 On **drain**: If there are any pending statements, they are run. If the statement generates a result set and the operator has an output port, tuples are generated from the results and submitted to the output port. If the operator has an error output port and the statement generates any errors, tuples are generated from the errors and submitted to the error output port.

 On **checkpoint**: A database commit is performed.

 On **reset**: Any pending statements are discarded. A rollback is performed.

 The new version of toolkit 1.3.x. supports also `optional type`.

 The SPL applications based on new REDIS toolkit and created with a new Streams that supports **optional type** are able to write/read 'null' to/from a `nullable` column in a table. </description>
      <metrics/>
      <customLiterals>
        <enumeration>
          <name>com.ibm.streamsx.redis.CommitPolicy</name>
          <value>OnCheckpoint</value>
          <value>OnTransactionAndCheckpoint</value>
        </enumeration>
      </customLiterals>
      <executionSettings>
        <className>com.ibm.streamsx.redis.REDISRun</className>
      </executionSettings>
      <libraryDependencies>
        <library>
          <cmn:description>Operator class library</cmn:description>
          <cmn:managedLibrary>
            <cmn:libPath>../../impl/lib/com.ibm.streamsx.redis.jar</cmn:libPath>
            <cmn:libPath>../../impl/lib/ext/*</cmn:libPath>
          </cmn:managedLibrary>
        </library>
      </libraryDependencies>
    </context>
    <parameters>
      <parameter>
        <name>appConfigName</name>
        <description>Specifies the name of the application configuration that contains REDIS connection related configuration parameters.  The 'credentials', 'keyStorePassword' and 'trustStorePassword' parameter can be set in an application configuration.  If a value is specified in the application configuration and as operator parameter, the application configuration parameter value takes precedence. </description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>batchSize</name>
        <description>This optional parameter specifies the number of statement to execute as a batch. The default batch size is 1.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>checkConnection</name>
        <description>This optional parameter specifies whether a **checkConnection** thread should be start. The thread checks periodically the status of REDIS connection. The REDISRun sends in case of any connection failure a SqlCode and a message to SPL application.The default value is `false`.</description>
        <optional>true</optional>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>commitInterval</name>
        <description>This parameter sets a commit interval for the sql statements that are being processed and overrides the batchSize and transactionSize parameters. </description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>commitPolicy</name>
        <description>This parameter specifies the commit policy that should be used when the operator is in a consistent region. 

If set to *OnCheckpoint*, then commits will only occur during checkpointing. 

If set to *OnTransactionAndCheckpoint*, commits will occur during checkpointing as well as whenever the **transactionCount** or **commitInterval** are reached. 

The default value is *OnCheckpoint*.

It is recommended that the *OnTransactionAndCheckpoint* value be set if the tables that the statements are being executed against can tolerate duplicate entries as these parameter value may cause the same statements to be executed if the operator is reset. 

It is also highly recommended that the **transactionCount** parameter not be set to a value greater than 1 when the policy is *onTransactionAndCheckpoint*, as this can lead to some statements not being executed in the event of a reset. 

This parameter is ignored if the operator is not in a consistent region. The default value for this parameter is *OnCheckpoint*.</description>
        <optional>true</optional>
        <expressionMode>CustomLiteral</expressionMode>
        <type>com.ibm.streamsx.redis.CommitPolicy</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>connectionTimeout</name>
        <description>This optional parameter specifies the userâ€™s password. If the redisPassword parameter is specified, it must have exactly one value of type rstring. . This parameter can be overwritten by the **credentials** and **redisProperties** parameters.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>credentials</name>
        <description>This optional parameter specifies the JSON string that contains the redis credentials: **username**, **password** and **redisurl** or **redisUrl**. 

This parameter can also be specified in an application configuration.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>hasResultSetAttr</name>
        <description>This parameter points to an output attribute and returns true if the statement produces result sets, otherwise, returns false</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>idleSessionTimeOut</name>
        <description>This optional parameter specifies the Idle Session Timeout in minute. Once the idle time value is reached, the operator close the database connection. Th timer restarts after a new query.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>isolationLevel</name>
        <description>This optional parameter specifies the transaction isolation level at which statement runs. If omitted, the statement runs at level **READ_UNCOMMITTED**.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>keyStore</name>
        <description>This optional parameter specifies the path to the keyStore. If a relative path is specified, the path is relative to the application directory. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>keyStorePassword</name>
        <description>This parameter specifies the password for the keyStore given by the **keyStore** parameter. The **sslConnection** parameter must be set to `true` for this parameter to have any effect. This parameter can also be specified in an application configuration.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>keyStoreType</name>
        <description>This optional parameter specifies the type of the keyStore file, for example 'PKCS12'. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>pluginName</name>
        <description>Specifies the name of security plugin. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>reconnectionBound</name>
        <description>This optional parameter specifies the number of successive connection attempts that occur when a connection fails or a disconnect occurs.  It is used only when the **reconnectionPolicy** parameter is set to **BoundedRetry**; otherwise, it is ignored. The default value is **5**.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>reconnectionInterval</name>
        <description>This optional parameter specifies the amount of time (in seconds) that the operator waits between successive connection attempts.  It is used only when the **reconnectionPolicy** parameter is set to `BoundedRetry` or `InfiniteRetry`; othewise, it is ignored.  The default value is `10`.</description>
        <optional>true</optional>
        <type>float64</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>reconnectionPolicy</name>
        <description>This optional parameter specifies the policy that is used by the operator to handle database connection failures.  The valid values are: **NoRetry**, **InfiniteRetry**, and **BoundedRetry**. 

The default value is **BoundedRetry**. If **NoRetry** is specified and a database connection failure occurs, the operator does not try to connect to the database again.  

The operator shuts down at startup time if the initial connection attempt fails. If **BoundedRetry** is specified and a database connection failure occurs, the operator tries to connect to the database again up to a maximum number of times. 

The maximum number of connection attempts is specified in the **reconnectionBound** parameter.  The sequence of connection attempts occurs at startup time. If a connection does not exist, the sequence of connection attempts also occurs before each operator is run. 

If **InfiniteRetry** is specified, the operator continues to try and connect indefinitely until a connection is made.  This behavior blocks all other operator operations while a connection is not successful.  

For example, if an incorrect connection password is specified in the connection configuration document, the operator remains in an infinite startup loop until a shutdown is requested.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisClassName</name>
        <description>This required parameter specifies the class name for redis driver and it must have exactly one value of type rstring.

The redis class names are defined by database vendors: 

For example: 

 **DB2**        com.ibm.db2.jcc.DB2Driver 

**ORACLE**     oracle.redis.driver.OracleDriver

**PostgreSQL** org.postgresql.Driver</description>
        <optional>false</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisHost</name>
        <description>This required parameter of type rstring specifies the path and the file name of redis driver librarirs with comma separated in one string. It is recommended to set the value of this parameter without slash at begin, like 'opt/db2jcc4.jar'. In this case the SAB file will contain the driver libraries.

Please check the documentation of database vendors and download the latest version of redis drivers. </description>
        <optional>false</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisPassword</name>
        <description>This optional parameter specifies the userâ€™s password. If the redisPassword parameter is specified, it must have exactly one value of type rstring. . This parameter can be overwritten by the **credentials** and **redisProperties** parameters.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisPort</name>
        <description>This optional parameter specifies the userâ€™s password. If the redisPassword parameter is specified, it must have exactly one value of type rstring. . This parameter can be overwritten by the **credentials** and **redisProperties** parameters.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisProperties</name>
        <description>This optional parameter specifies the path name of the file that contains the redis connection properties: **user**, **password** and **redisUrl**. 

 It supports also 'username' or 'redisUser' as 'user' and 'redisPassword' as 'password' and 'redisurl' as 'redisUrl'.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisUrl</name>
        <description>This parameter specifies the database url that REDIS driver uses to connect to a database and it must have exactly one value of type rstring. The syntax of redis url is specified by database vendors. For example, redis:db2://&lt;server&gt;:&lt;port&gt;/&lt;database&gt;

  **redis:db2** indicates that the connection is to a DB2 for z/OS, DB2 for Linux, UNIX, and Windows.

  **server**, the domain name or IP address of the data source.

  **port**, the TCP/IP server port number that is assigned to the data source.

  **database**, a name for the data source.

 For details about the redisUrl string please check the documentation of database vendors

 This parameter can be overwritten by the **credentials** and **redisProperties** parameters.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>redisUser</name>
        <description>This optional parameter specifies the database user on whose behalf the connection is being made. If the **redisUser** parameter is specified, it must have exactly one value of type rstring.

This parameter can be overwritten by the **credentials** and **redisProperties** parameters.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>securityMechanism</name>
        <description>Specifies the value of securityMechanism as Integer. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>sqlFailureAction</name>
        <description>This optional parameter has values of log, rollback and terminate. If not specified, log is assumed. 

If sqlFailureAction is **log**, the error is logged, and the error condition is cleared. 

If sqlFailureAction is **rollback**, the error is logged, the transaction rolls back. 

If sqlFailureAction is **terminate**, the error is logged, the transaction rolls back and the operator terminates.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>sqlStatusAttr</name>
        <description>This parameter points to one or more output attributes and returns the SQL status information, including SQL code (the error number associated with the SQLException) and SQL state (the five-digit XOPEN SQLState code for a database error)</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>sslConnection</name>
        <description>This optional parameter specifies whether an SSL connection should be made to the database. When set to `true`, the **keyStore**, **keyStorePassword**, **trustStore** and **trustStorePassword** parameters can be used to specify the locations and passwords of the keyStore and trustStore. The default value is `false`.</description>
        <optional>true</optional>
        <type>boolean</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>statement</name>
        <description>This parameter specifies the value of any valid SQL or stored procedure statement. The statement can contain parameter markers</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>statementAttr</name>
        <description>This parameter specifies the value of complete SQL or stored procedure statement that is from stream attribute (no parameter markers).</description>
        <optional>true</optional>
        <expressionMode>Attribute</expressionMode>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>statementParamAttrs</name>
        <description>This optional parameter specifies the value of statement parameters. The statementParameter value and SQL statement parameter markers are associated in lexicographic order. For example, the first parameter marker in the SQL statement is associated with the first statementParameter value.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>transactionSize</name>
        <description>This optional parameter specifies the number of executions to commit per transaction. The default transaction size is 1 and transactions are automatically committed.</description>
        <optional>true</optional>
        <type>int32</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>trustStore</name>
        <description>This optional parameter specifies the path to the trustStore. If a relative path is specified, the path is relative to the application directory. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>trustStorePassword</name>
        <description>This parameter specifies the password for the trustStore given by the **trustStore** parameter. The **sslConnection** parameter must be set to `true` for this parameter to have any effect. This parameter can also be specified in an application configuration.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
      <parameter>
        <name>trustStoreType</name>
        <description>This optional parameter specifies the type of the trustStore file, for example 'PKCS12'. The **sslConnection** parameter must be set to `true` for this parameter to have any effect.</description>
        <optional>true</optional>
        <type>rstring</type>
        <cardinality>1</cardinality>
      </parameter>
    </parameters>
    <inputPorts>
      <inputPortSet>
        <description>The `REDISRun` operator has one required input port. When a tuple is received on the required input port, the operator runs an SQL statement.</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>false</controlPort>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </inputPortSet>
      <inputPortSet>
        <description>The `REDISRun` operator has one optional input port. This port allows operator to change redis connection information at run time.</description>
        <windowingDescription/>
        <windowingMode>NonWindowed</windowingMode>
        <windowPunctuationInputMode>Oblivious</windowPunctuationInputMode>
        <controlPort>true</controlPort>
        <cardinality>1</cardinality>
        <optional>true</optional>
      </inputPortSet>
    </inputPorts>
    <outputPorts>
      <outputPortSet>
        <description>The `REDISRun` operator has one required output port. The output port submits a tuple for each row in the result set of the SQL statement if the statement produces a result set. The output tuple values are assigned in the following order: 1. Columns that are returned in the result set that have same name from the output tuple 2. Auto-assigned attributes of the same name from the input tuple</description>
        <windowPunctuationOutputMode>Generating</windowPunctuationOutputMode>
        <cardinality>1</cardinality>
        <optional>false</optional>
      </outputPortSet>
      <outputPortSet>
        <description>The `REDISRun` operator has one optional output port. This port submits tuples when an error occurs while the operator is running the SQL statement. The tuples deliver sqlCode, sqlStatus and sqlMessage. </description>
        <windowPunctuationOutputMode>Free</windowPunctuationOutputMode>
        <cardinality>1</cardinality>
        <optional>true</optional>
      </outputPortSet>
    </outputPorts>
  </javaOperatorModel>
</operatorModel>